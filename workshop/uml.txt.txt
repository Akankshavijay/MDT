@startuml
title Smart Warehouse Capstone Project â€“ Full System UML (Logging, Storage, AGV)

package "Logging" {
  class LogManager {
    - baseDir: File
    - writers: Map<String, BufferedWriter>
    - lastWrite: Map<String, Long>
    - ROTATION_INTERVAL_MS: long
    + log(subsystem: String, message: String)
    + saveAsJson(subsystem: String, jsonContent: String)
    + saveWarehouseSnapshot(map: WarehouseMap, subsystem: String)
    + saveAGVSnapshot(manager: RobotManager, subsystem: String)
    + listLogs(subsystem: String): List<String>
    + listSubsystems(): Set<String>
  }
}

package "Warehouse Map" {
  class WarehouseMap {
    - binMap: Map<String, Bin>
    - entryPoints: Map<String, int[]>
    - exitPoints: Map<String, int[]>
    - chargingStations: Map<String, int[]>
    + addBin(bin: Bin)
    + getBins(): Map<String, Bin>
    + getEntryPoints(): Map<String, int[]>
    + getExitPoints(): Map<String, int[]>
    + getChargingStations(): Map<String, int[]>
    + printMap()
  }
}

package "Storage Management" {
  class Bin {
    - id: String
    - occupied: boolean
    - item: Item
    - x: int
    - y: int
    - distanceToEntry: double
    - distanceToExit: double
    + computeDistances(entryCoords: List<int[]>, exitCoords: List<int[]>)
  }

  class Item {
    - id: String
    - type: String
  }

  class StorageManager {
    - bins: Map<String, Bin>
    - logger: LogManager
    + addBin(bin: Bin)
    + storeItem(binId: String, item: Item)
    + removeItem(binId: String)
    + logSystemState()
  }
}

package "Robot System" {
  class AGV {
    - id: String
    - type: AGVType
    - battery: int
    - x: int
    - y: int
    - state: RobotState
    + perform(task: RobotTask)
    + moveTo(x: int, y: int)
    + logState()
  }

  enum AGVType {
    LOADER
    UNLOADER
    MOVER
  }

  enum RobotState {
    FREE
    IN_PROGRESS
    CHARGING
    ERROR
  }

  class RobotTask {
    - id: String
    - type: String
    - binId: String
  }

  class RobotManager {
    - robots: Map<String, AGV>
    - logger: LogManager
    + addRobot(robot: AGV)
    + assignTask(task: RobotTask)
    + getAllRobots(): Collection<AGV>
  }
}

' --- Relationships ---
StorageManager --> LogManager : uses
WarehouseMap --> Bin : contains
Bin --> Item : holds
WarehouseMap --> LogManager : calls saveWarehouseSnapshot()
StorageManager --> WarehouseMap : references
RobotManager --> LogManager : uses for log() and JSON
RobotManager --> AGV : manages
AGV --> LogManager : logs state
AGV --> RobotTask : executes
LogManager --> "logs/<subsystem>/*.json" : saves JSON
LogManager --> "logs/<subsystem>/*.log" : saves text logs

@enduml
